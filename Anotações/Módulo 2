DATA BINDING

Como a maioria dos sites hoje em dia não é estática, os dados são fornecidos por um servidor backend. Os dados são utilizados para exibir dinamicamente conteúdo ou atualizar conteúdo no site.
O template viabiliza o meio de comunicação com o DOM. Os dados fluem do backend para a aplicação web até o DOM. O template requer dados para ser disponibilizado através do componente. Além disso, os eventos de interação do usuário com o DOM são enviados de volta à aplicação.
Já vimos exemplo de como o Angular nos dá suporte nessa questão, permitindo o uso de propriedades dos componentes no template.
Chama-se data binding o mecanismo de coordenação do fluxo de informação entre o template e o DOM, ou, no caso do Angular, podemos dizer entre o componente e a propriedade no DOM.
Na perspectiva do componente, uma propriedade ou método é disponibilizado ao template ou é invocado a partir do DOM. Na perspectiva do template, há informações que precisam ser renderizadas no DOM ou serem tomadas do DOM e enviadas de volta ao componente.
Quatro formas de data binding com Angular:
    {{ value }} : um valor do componente é utilizado no template;
    [property] = "value" : uma propriedade associada a uma tag [], passada como valor para uma propriedade do componente;
    (event)="handler" : evento gerado no DOM gera uma chamada para um manipulador ou método do componente;
    [(ngModel)]="property" : qualquer mudança no DOM será refletida na propriedade do componente, e qualquer mudança na propriedade vai ser refletida no DOM.
Binding targets são propriedades declaradas à esquerda da declaração, enquanto binding sources são declaradas à direita.
Definir propriedades de targets associados a selectors de componente é uma forma de passar informação a um componente, ou enviar informação de um componente a outro. Utilizamos input e output decorators. Ex.: @Input() nome: Nome; @Output() event = new EventEmitter<Nome>();

Neste projeto, implementamos a funcionalidade do usuário poder clicar no prato e poder ver informações sobre ele.

Existe uma classe dish na qual introduzimos a classe dos objetos "dish" (os pratos), com seus parâmetros: preço, comentário, descrição, etc. Essa classe centralizará todas as chamadas à classe.
Criamos um outra classe dishes para passar os valores de cada objeto dish, organizados sob a forma de array.
    export const DISHES: Dish[] = [
    {
        id: '0',
        ...
        }
    {
        id: '1',
        ...
    }
    
A propriedade input está ligada a uma propriedade DOM no template. Atualiza o template com o valor da propriedade no DOM.
Usando Input para compartilhar dados entre componentes: no componente dishdetail, entramos com a propriedade dish que recebe os objetos de Dish.
    @Input() dish: Dish;
    // o item dish advém da classe Dish, importada do arquivo dish.ts
No componente menu, a propriedade "dishes" recebe o valor de cada objeto dentro da classe Dish, e cujos valores foram passados na classe DISHES.
    dishes: Dish[] = DISHES;

No template do componente menu, para permitir que o click no objeto prato desencadeie um evento, utilizamos no grid de pratos o handler:
    <mat-grid-tile *ngFor="let dish of dishes" (click)="onSelect(dish)">
    //onSelect(dish) define o evento relativo a quando um item (dish) é clicado
O template no componente dishdetail vêm logo abaixo do grid:
    <app-dishdetail [dish] = "selectedDish"></app-dishdetail>
    //o parâmetro passado dentro do selector diz que a propriedade [dish] é passado como valor da propriedade no componente "selectedDish"
Para garantir a relação entre o objeto clicado e suas informações a serem exibidas, incluímos no componente menu:
    selectedDish!: Dish;
    ...
    onSelect(dish: Dish) {
    this.selectedDish = dish;
  }

    //selectedDish vai receber o valor do atual dish clicado


MODEL VIEW CONTROLLER FRAMEWORK

MVC e MVVM frameworks
Design patterns são padrões de projetos que referem-se a soluções bem documentadas para problemas recorrentes. Soluções para problemas recorrentes resolvidos por meio de software são os chamados software design patterns.
Um dos padrões de engenharia de software, um padrão de arquitetura - software engineering architecture pattern -, prescreve isolar o domínio lógico da interface do usuário. Há uma separação entre: view, model e controller. Isso permite desenvolvimento, teste e manutenção independentes.
Uma aplicação pode ser separada em três partes: model, view e controller.

MVC (Model-View-Controller)
Uma abordagem baseada em MVC consiste na seguinte divisão entre model, view e controller.
Model:
    gerencia o comportamento dos dados da aplicação;
    responde a requisições sobre o estado de informações;
    responde a instruções para mudar os estados;
    em sistemas controlados por eventos, o model notifica o view quando uma informação é alterada.
View:
    renderiza o model para uma forma passível de interação (elemento de interface);
    múltiplas views podem existir para um mesmo model, isto é, diferentes maneiras de apresentar a informação para o usuário;
    a janela de exibição possui correspondência com o tamanho do display;
Controller:
    recebe entradas do usuário e inicia chamadas aos objetos do model;
    instrui o model e a janela de exibição sobre ações baseadas na entrada a serem tomadas;

MVVM (Model View View-Model)
Na abordagem MVVM, o model representa a lógica e os dados; o view-model deriva do model e compreende a parte da informação necessária à renderização de uma view; view-model e view representam a apresentação e a lógica de apresentação.
View model é uma abstração da view, compreendendo as propriedades públicas e os comandos disponíveis, e dispõe declarative data binding (ligação de dados declarativa).
A forma como o Angular implementa os componentes e os templates pode ser vista como um modelo de abordagem MVVM.


SERVICES

Quando criamos um componente no Angular, convém deixarmos as classes de componente o mais exuto possível. O componente deve concentrar a tarefa de agir como um mediador entre a exibição (view) e a lógica (business logic) - ou, entre a view e o model, em outras palavras.
Tarefas como buscar dados, validar entradas do usuário e informações de logging devem ser delegadas ao service. O service, portanto, é uma funcionalidade que provê esse tipo de recurso para que as classes de componente executem seu próprio trabalho. Ao service cabe, portanto, boa parte da lógica da aplicação.
No Angular, temos a seguinte relação entre componente e template. O template atua renderizando a exibição (view) do componente, e o componente administra as propriedades e métodos que vão ser acessados pelo template para exibir a informação.
O service, por sua vez, atua no componente, sendo injetado neste para suprimento de alguns recursos de que necessita o componente.
Os services estão relacionadas à: injeção de dependência, promessas e JavaScript reativo.


DEPENDENCY INJECTION

Injeção de dependência é um padrão de projeto para resolver questões de dependência. É útil quando há objetos que dependem de outros objetos.
Dependência é quando um objeto depende de outro objeto. Injeção consiste em passar uma dependência para um objeto dependente, o que o permite utilizar-se do que necessita. O objeto dependente não precisa lidar com como o primeiro objeto é implementado ou criado.
Há três formas de um objeto acessar o outro:
    criar o objeto dependente utilizando novo operador;
    declarar o objeto dependente como variável global, e rastrear a dependência utilizando essa variável;
    passar a dependência onde ela é necessária, sendo ela injetada para nós.
A terceira opção, da dependência, é mais flexível e precisa de menos código.
A DI envolve quatro funções:
    service: do qual nós fazemos uso;
    client: aquilo que é dependente, como o caso do componente;
    interface: sobre como fazer uso do service;
    injector: a entidade responsável por injetar o objeto.
Com Angular, podemos escrever a lógica no objeto independente e simplesmente injetá-lo onde for necessário. O subsistema de injeção do Angular é responsável por tornar possível todas as operações envolvidas.


FUNDAMENTOS DO SERVICE

Criar um service com o Angular CLI: ng generate service pasta/nomedoservice
O arquivo ts do service conta com um decorator @Injetable , o que indica que esse objeto pode ser injetável em outros locais.
Colocamos o import dos objetos dos quais queremos receber informação.

Em nosso projeto, criamos um service "dish", e nele um método para pegar o array de objetos da classe Dish, e retornar a constante DISHES.
    getDishes(): Dish[] {
        return DISHES;
    }
No app.module.ts, importamos o service.
    import { DishService } from './services/dish.service';
E para fazê-lo disponível a toda a aplicação, declaramos também em providers.
    providers: [DishService],
Onde haviámos importado os objetos diretamente (import da classe DISHES), substituimos pela importação do service. A ideia, portanto, é delegar a tarefa de buscar informação para o service.
Para acessar as informações do objeto, criamos um construtor. A injeção de dependência é declara aqui.
O construtor especifica um tipo e armazena uma instância da classe (do service) em um campo privado.
    constructor(private dishService: DishService) { }
ngOnInit é um método no componente chamado após todas as propriedades vinculadas a dados forem inicializadas.
Aqui vamos alinhar: a variável local dishes e o método getDishes do service.
    ngOnInit() {
        this.dishes = this.dishService.getDishes();
    }
    //o objeto dishes vai ser abastecido através do método getDishes, e colocado na variável local


HEADER AND FOOTER

Criar o header e o footer na página:
    ng generate component header
    ng generate component footer

    fxLayout="row wrap"
    fxLayout.lt-md="comlumn"
    //telas menores que médio (less than medium), exibe como coluna

    fxLayoutGap="10px"
    //vão entre itens filhos

    <div fxFlex="55">
    //ocupa 55% do tamanho


ROUTING

Angular Router é um module que permite navegar entre as diferentes views dos diferentes componentes que formam a aplicação.
Usa a URL do navegador como uma instrução para navegar entre diferentes views geradas por cliente. Parâmetros adicionais podem ser adicionados.
O histórico de API do hmtl5 possibilita que os desenvolvedores modifiquem a URL do site sem que a página seja atualizada totalmente.
O pushState() permite adicionar uma entrada no histórico do navegador sem causar a ação de recarregar a página; o replaceState() modifica a entrada.
É necessário definir uma base, um local a partir do qual especificamos partes adicionais ao caminho URL que não resultarão em recarregar - <base href="/">
Outra forma de fazer navegação é através de hashtags; especificar um link usando hashtag indica que ele se refere a um link na mesma página - o que também não causa recarregamento, apenas redireciona para outro local na mesma página.
Exemplo:
    http://example.com/home
    Modificar a última parte do URL para
    http://example.com/menu
    usando um método push state, e a mudança de URL não causa recarregamento.

Angular Router
Dependendo do URL exibido no navegador, iremos utilizá-lo para navegar entre as diferentes views dos diferentes componentes da aplicação Angular.
Devemos importar o Router Module e os routes.
Routes
Routes permitem definir as rotas. São especificadas sob a forma de um caminho e o correspondente componente.
    {path: "/home", component: HomeComponent}
routerOutlet
No template do AppComponent, incluimos a diretiva routerOutlet. A view correspondente ao componente é incluída sempre que essa diretiva aparece.
    <router-outlet></router-outlet>
routerLink
Para acionar a navegação, utilizamos a-tags com a diretiva routerLink. Ela especifica um caminho.
    <a routerLink="/menu">Menu</a>
Quando o link é clicado, essa ação aciona o Angular Router para mudar a navegação para uma determinada view. A ligação entre o link e o componente já foi dado no router.


ANGULAR ROUTING

Criar um module para receber o routing
    ng generate module app-routing
Incluir o import no app.module.ts
    import { AppRoutingModule } from './app-routing/app-routing.module';

    @NgModule({
    . . .
  
    imports: [
    . . .,
    AppRoutingModule
    ],
  
    . . .
  
    })

No app-routing.module.ts, incluir os imports do module Router e routes.
    import { RouterModule, Routes } from '@angular/router';

    import { routes } from './routes';

    @NgModule({
    imports: [
        CommonModule,
        RouterModule.forRoot(routes)
    ],
    exports: [ RouterModule ],

O RouterModule recebe como parâmetro a configuração de routes. Isso foi indicado acima por:
    RouterModule.forRoot(routes)

Para torná-lo disponível para inclusão no appmodule, incluímos acima também o export.
    exports: [ RouterModule ],

No arquivo ts de routes, importar também o router.
    import { Routes } from '@angular/router';

Devemos anexar a cópia do import de todos os componentes de interesse da aplicação.
    import { MenuComponent } from '../menu/menu.component';
    import { DishdetailComponent } from '../dishdetail/dishdetail.component';
    import { HomeComponent } from '../home/home.component';
    import { AboutComponent } from '../about/about.component';
    import { ContactComponent } from '../contact/contact.component';

Devemos criar uma constante com os objetos 'routes', cada qual declarado com um caminho e seu correspondente componente, conforme o modelo.
    export const routes: Routes = [
    { path: 'home',  component: HomeComponent },
    //quando o URL incluir "/home", estaremos navegando no HomeComponent
    { path: 'menu',     component: MenuComponent },
    { path: '', redirectTo: '/home', pathMatch: 'full' }
    ];
    //quando não houver nada incluído no URL, a página inicial, será o home

No app.component.html, incluimos a diretiva <router-outlet>. Onde houver essa diretiva, o Angular automaticamente usa esse espaço para exibir a view correspondente.

Último passo é incluir a diretiva routerLink nos botões da toolbar, no componente header. Lembrando, através da toolbar podemos saltar entre diferentes partes dentro da aplicação web. Cada routerLink vai apontar para um path, como exemplo:
    <a mat-button routerLink="/home"><span class="fa fa-home fa-lg"></span> Home</a>
    
    
SINGLE PAGE APPLICATIONS

Em um site tradicional, o navegador faz a requisição ao server para baixar o conteúdo a ser exibido toda vez que uma página desse site é aberto. Isso requer o carregamento de toda uma página a cada vez.
Diferentemente, as aplicações de página única fazem requisição do download da aplicação completa. Um conjunto de assets são baixados do server para renderizar a aplicação no cliente. Cliques em links fazem requisições ao server apenas para download de alguns dados, geralmente no formato de dados JSON.
O carragamento inicial é um pouco mais custoso e demorado, mas as demais requisições são leves. A interação se assemelha, portanto, a de um aplicação desktop.
Outra particularidade é a possibilidade de implementar a pré-renderização de algumas das views no lado do servidor, o que permite exibir parte da informação ao cliente mais rapidamente, enquanto o resto da aplicação ainda é baixada pelo navegador.
Boa parte do trabalho de renderizar a aplicação é delegada ao cliente, aliviando o servidor. Isso abre espaço para pensar em escalar a aplicação. 
Alguns dos desafios desse tipo de aplicação consistem em: manter um histórico de acesso, fazer análises de dados e diminuir o tempo de carregamento inicial.


DEVELOPING SINGLE PAGE

Em nosso projeto, aplicamos um filtro de array sobre a classe DISHES.
Função filter
    array.filter(function(currentValue), thisValue)
Ex.:
    getDish(id: string): Dish {
    return DISHES.filter((dish) => (dish.id === id))[0];
    //o filtro é aplicado ao array DISHES, retorna objetos do tipo dish; à direita da arrow function temos as declarações da função. estamos filtrando os objetos dish por id -  quando o id passado for igual ao id do objeto, esse objeto é extraído.
    //como a função retorna os valores dentro de um novo array, [0] vai limitar a quantidade de objetos a apenas 1, pois queremos um dish específico.

Ex.:
  getFeaturedDish(): Dish {
    return DISHES.filter((dish) => dish.featured)[0];
  }
  //featured retorna um booleano, logo o dish featured terá valor 1 e será extraído pelo filter. estamos extraindo novamente apenas um dish de interesse

No componente home, inserimos as classes FeaturedDish e FeaturedPromotion criadas anteriormente, pois vamos construir dois cards ao template.
export class HomeComponent implements OnInit {
  dish!: Dish;
  promotion!: Promotion;

  constructor(private dishservice: DishService,
    private promotionservice: PromotionService) { }

  ngOnInit() {
    this.dish = this.dishservice.getFeaturedDish();
    this.promotion = this.promotionservice.getFeaturedPromotion();
  }


ANGULAR ROUTERS: PARAMETERS

Podemos especificar valores como parâmetro no URL, de forma que o caminho de um componente permita passar informação de um componente a outro.
O parâmetro de rota especificado no caminho é um token. Ex.: menu/:id
Podemos especificar um parâmetro de rota no caminho, e a partir de outra localização, passar o comoponente através do parâmetro para outro componente.
É possível especificar parâmetros de rota ao especificar um link de vetor de parâmetros. Ex.:
    <a *ngFor="let dish of dishes" [routerLink]="['/dishdetail',dish.id]>
Outra forma é usar um método fornecido pelo Router Module chamado router navigate. Ex.:
    this.router.navigate(['/dishdetail',dish.id])
Devemos, além disso, permitir que o componente tome o valor especificado como token no link URL. Isso é possível através de um service fornecido pelo Router Module chamado ActivatedRoute Service.
Router service trabalha a partir de:
    URL: possui um observador para os caminhos de rota (route paths), representados como um vetor de strings para cada parte do caminho;
    parames: possui observador que contém os parâmetros específicos da rota;
    queryparams: possui observador que contém parâmetros query disponíveis a todas as rotas.

Em nosso projeto, no arquivo TS routes, adicionamos um novo link.
    export const routes: Routes = [
        { path: 'dishdetail/:id',     component: DishdetailComponent },
    //o parâmetro de rota aqui é id, no qual passaremos os ids dos pratos

No menu, queremos exibir cada prato em um link, fazendo uso dos parâmetros dentro dos caminho de rota.
No template, queremos que os items redirecionem para os links que, ao serem clicados, mostrem os detalhes dos respectivos itens. Habilitamos o router link.
    <mat-grid-tile *ngFor="let dish of dishes" [routerLink]="['/dishdetail', dish.id]">
    //cada dish recebe um link de rota espeficicado por seu próprio id

No componente dishdetail, devemos tornar acessíveis os parâmetros dos objetos que serão passados para construir os links.
    import { DishService } from '../services/dish.service';
    //de onde obtemos os objetos

    import { Params, ActivatedRoute } from '@angular/router';
    import { Location } from '@angular/common';
    //location permite rastrear dados da página no histórico do navegador; é útil para navegar para páginas anteriores.

    export class DishdetailComponent implements OnInit {

        dish!: Dish;

        constructor(private dishservice: DishService,
            private route: ActivatedRoute,
            private location: Location) { }
        //services necessários

        ngOnInit() {
            const id = +this.route.snapshot.params['id'];
            this.dish = this.dishservice.getDish(id);
        }

        goBack(): void {
            this.location.back();
        }
        //location fornece um método que permite voltar para o item anterior no histórico do navegador

No card da descrição do pratos (dishdetail.component.hmtl), disponilizamos um botão que faz usado do método goBack.
    <button mat-button (click)="goBack()">BACK</button>
    
